/**
 *
 * @author justin
 */

import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.io.*;


public class TetrisProject //equivalent of TetrisWindow which is in charge of running the whole app.
{

    public TetrisProject(){
        
    }
    
    public static void main(String[] args) {
        TetrisProject app = new TetrisProject();
    }
    
}

class TetrisDisplay {
    
    String[] Colors = {"red", "blue", "yellow", "magenta", "green", "pink", "purple"};
    TetrisGame game;
    //Timer timer;
    int start_y, start_x, cell_size, speed;
    boolean pause;
    
    
    public TetrisDisplay(TetrisGame gam){
        gam = this.game;
    }
    
    public void cycleMove(){}
    
    public void paintComponent(Graphics g){
        drawBackground();
        drawWell();
        drawFallingBrick();
    }
    
    private void drawFallingBrick(){}
    
    private void drawWell(){}
    
    private void drawBackground(){};
    private void translateKey(){}
    
    
    
    
}

class TetrisGame extends JFrame{
    
    TetrisBrick fallingBrick;
    int [][] background;
    int rows = 20, cols = 12, numBrickTypes = 7;
    Random randGen;
    
    
    public TetrisGame(){
        
    }
    
    public void initBoard(){};
    
    public void newGame(){};
    
    public void fetchBoardPosition (){};
    
    private void transferColor(){};
    
    private void spawnBrick(){
        randGen = new Random(numBrickTypes);
//        if(randGen == 0)
//             longBrick = new LongBrick(1); 
//        else if (fallingBrick instanceof SquareBrick)
//            return 1;
//        else if (fallingBrick instanceof StackBrick)
//            return 2;
//        else if (fallingBrick instanceof ZeeBrick)
//            return 3;
//        else if (fallingBrick instanceof EssBrick)
//            return 4;
//        else if (fallingBrick instanceof JayBrick)
//            return 5;
//        else if (fallingBrick instanceof ElBrick)
//            return 6;
//        return -1;
        
        
    }
    
    public void makeMove(){};
    
    private void validateMove(){};
    
    public int getFallingBrickColor( TetrisBrick fallingBrick){
  
        return fallingBrick.getColorNumber();
        
//        if(fallingBrick instanceof LongBrick)
//            return 0;
//        else if (fallingBrick instanceof SquareBrick)
//            return 1;
//        else if (fallingBrick instanceof StackBrick)
//            return 2;
//        else if (fallingBrick instanceof ZeeBrick)
//            return 3;
//        else if (fallingBrick instanceof EssBrick)
//            return 4;
//        else if (fallingBrick instanceof JayBrick)
//            return 5;
//        else if (fallingBrick instanceof ElBrick)
//            return 6;
//        return -1;
    }

    
    public int getNumberSegs(){
        return fallingBrick.numSegments;
    }
    
    public int getSegRow(){
        return 0;
    }
    
    public int getSegCol(){
        return 0;
    }
    
}

abstract class TetrisBrick {
    
    final int numSegments = 4;
    int[][] position = new int[numSegments][2];
    int colorNum;
    Color color;
    
    public TetrisBrick( int colNum){
        colNum = this.colorNum;
        
    }
    
    public void moveUp(int current_row){
        for(int i = 0; i < numSegments; i++){
            //position = position[i][row -1];
        }
    }
    
    public void rotate(){}
    
    public void unrotate(){}
    
    public void moveDown(){}
    
    public void moveLeft(){}
    
    public void moveRight(){}
    
    public int getColorNumber(){
        return colorNum;
    }
    
    public void initPosition(){}
   
}

class ElBrick extends TetrisBrick
{
    int position[][];
    public ElBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,0}, {2,0}, {3,1}};
    }
}

class JayBrick extends TetrisBrick{
    
    public JayBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,1}, {2,1}, {3,1}};
    }
}
    

class EssBrick extends TetrisBrick{
    
    public EssBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,0}, {2,1}, {3,1}};
    }
    
}

class ZeeBrick extends TetrisBrick{
    
    public ZeeBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,0}, {2,1}, {3,1}};
    }
    
}

class StackBrick extends TetrisBrick{
    
    public StackBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,1}, {2,1}, {3,1}};
    }
    
}

class SquareBrick extends TetrisBrick{
    
    public SquareBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,0}, {2,1}, {3,1}};
    }
    
}

class LongBrick extends TetrisBrick{
    
    public LongBrick(int[][] pos, int colNum) {
        super(colNum);
    }
    
    @Override
    public void initPosition(){
        position = new int[][]{{0,0}, {1,0}, {2,0}, {3,0}};
    }
}
